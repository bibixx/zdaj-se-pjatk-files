<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://www.ceti.pl/~gralinski/lik320/odmiana.pl -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-2">
<META content="MSHTML 6.00.2737.800" name=GENERATOR></HEAD>
<BODY><PRE>/* 
   Odmiana nieosobowych rzeczowników mêsko¿ywotnych (np. 'baran', 's³oñ',
   'rak', 'lew', 'tygrys'...).
  
   Aby wywolaæ program, nale¿y zadaæ cel 'zacznij'.
*/

/* Informujemy interpreter, ¿e predykaty forma i temat s±
   dynamiczne, tzn. mog± byæ dol±czane do bazy i usuwane z niej. */
:- dynamic forma/4.
:- dynamic temat/2.

/* W wyrazie W zamienia koñcówkê K1 na K2. Wynikiem jest nowy wyraz U.
   Np. dla celu zamien_koncowke('koñ', 'ñ', 'nia', U) U przyjmie 
   warto¶æ 'konia'.
   Predykat w ogóle siê nie powodzi, je¶li K1 nie jest koñcówk± W. */

zamien_koncowke(W, K1, K2, U) :-
    atom_length(K1, DK1),      /* DK1 to d³ugo¶æ koñcówki K1 */
    sub_atom(W, LiczbaZnakowBezK1, DK1, 0, K1),
    sub_atom(W, 0, LiczbaZnakowBezK1, _, Poczatek), 
                         /* Poczatek to wyraz W bez koñcówki K1 */
    concat(Poczatek, K2, U). /* £±czymy wyraz z now± koñcówk±.*/


/* Wyznacza temat T dla rzeczownika W */
temat(W, T) :-
    ( zamien_koncowke(W, 'æ', 'ci', T), ! ;
      zamien_koncowke(W, 'ñ', 'ni', T), ! ;  /* np. 'koni' dla 'koñ' */
      zamien_koncowke(W, '¶', 'si', T), ! ;
      T = W ).


/* forma(P, L, W, F) - F jest form± rzeczownika W dla przypadku P
   i liczby L */

forma(dope³niacz, liczba_pojedyncza, W, F) :-
    temat(W, T), concat(T, 'a', F).  /* do tematu dodajemy koñcówkê 'a' */

forma(celownik, liczba_pojedyncza, W, F) :-
    temat(W, T), concat(T, 'owi', F).

forma(narzêdnik, liczba_pojedyncza, W, F) :-
    temat(W, T), concat(T, 'em', F).

forma(miejscownik, liczba_pojedyncza, W, F) :-
    temat(W, T),
    /* miêkkotematowe (których temat koñczy siê na 'i') maj± w miejscowniku
       koñcówkê 'iu' */
    (zamien_koncowke(T, 'i', 'iu', F), ! ;   
     concat(T, 'ie', F)).

forma(mianownik, liczba_mnoga, W, F) :-
    temat(W, T),
    (zamien_koncowke(T, 'i', 'ie', F), !;
     concat(T, 'y', F)).

forma(dope³niacz, liczba_mnoga, W, F) :-
    temat(W, T),
    (zamien_koncowke(T, 'i', 'i', F), !;
     concat(T, 'ów', F)).

forma(celownik, liczba_mnoga, W, F) :-
    temat(W, T), concat(T, 'om', F).

forma(narzêdnik, liczba_mnoga, W, F) :-
    temat(W, T), concat(T, 'ami', F).

forma(miejscownik, liczba_mnoga, W, F) :-
    temat(W, T), concat(T, 'ach', F).


/* ró¿ne ogólne regu³y */
forma(mianownik, liczba_pojedyncza, W, W).

/* biernik lp. jest równy dope³niaczowi lp. */
forma(biernik, liczba_pojedyncza, W, F) :-
    forma(dope³niacz, liczba_pojedyncza, W, F).

forma(wo³acz, liczba_pojedyncza, W, F) :-
    forma(miejscownik, liczba_pojedyncza, W, F).

forma(biernik, liczba_mnoga, W, F) :-
    forma(mianownik, liczba_mnoga, W, F).

forma(wo³acz, liczba_mnoga, W, F) :-
    forma(mianownik, liczba_mnoga, W, F).


menu :-
    nl,
    write('f - sprawd¼ formê fleksyjn±'),nl,
    write('w - wprowad¼ wyj±tek'),nl,
    write('t - wprowad¼ specjalny temat'),nl,
    write('k - koniec dzia³ania'),nl.

wykonaj(102 /* f */) :-
    write('podaj wyraz, przypadek i liczbê - ka¿dy wprowadzany atom zakoñcz kropk± i ENTEREM'), nl,
    read(W),
    read(P),
    read(L),
    ( forma(P, L, W, U), !, write('znaleziona forma to: '), write(U) ;
      write('nie znaleziono formy (byæ mo¿e wpisa³e¶ mnoga zamiast liczba_mnoga?)')), nl.
    
wykonaj(119 /* w */) :-
    write('podaj wyraz, przypadek, liczbê i w³a¶ciw± formê'), nl,
    read(W),
    read(P),
    read(L),
    read(F),
    asserta(forma(P, L, W, F) :- !).

wykonaj(116 /* t */) :-
    write('podaj wyraz i w³a¶ciwy temat'), nl,
    read(W),
    read(T),
    asserta(temat(W, T)).

zacznij :-
    repeat,
    menu,
    get_single_char(C),
    (C = 107 /* k */; wykonaj(C), fail).











</PRE></BODY></HTML>
