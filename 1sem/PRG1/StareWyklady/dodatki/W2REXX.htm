<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
  <title>O jêzyku REXX</title>
  
  <link rel="stylesheet" type="text/css" href="style/common.css">
</head>
 <body bgcolor="floralwhite">
<p><b>CO TO JEST REXX ?</b><br>
<br>
REXX jest jêzykiem programowania, który wybitnie wyró¿nia siê spo¶ród innych
przynajmniej trzema cechami: uniwersalno¶ci±, elastyczno¶ci± i prostot±.<br><br>
Jedn± z unikalnych jego zalet jest mo¿liwo¶æ stosowania go jako jêzyka programowania
wsadowego w ró¿nych systemach operacyjnych oraz jêzyka programowania makroinstrukcji
(lub tzw. skryptów) dla ró¿nych ¶rodowisk i aplikacji (np. edytorów, baz
danych, ¶rodowisk komunikacyjnych w tym komunikacji przez sockety czy ftp,
przy programowaniu interakcji ze stronami WWW). <br><br>
Ale na zintegrowaniu ze ¶rodowiskiem systemowym czy aplikacyjnym zalety REXXa
siê nie koñcz±. Jest on nastawiony na przetwarzanie symboli i w tym wzglêdzie
chyba nie ma sobie równych po¶ród uniwersalnych jêzyków programowania. Sprzyjaj±
temu: <br>
<ul>
  <li>bardzo mocna instrukcja "rozbioru" danych (parse), </li>
  <li>naturalno¶æ konkatenacji ³añcuchów znakowych, </li>
  <li>niedostêpne w innych jêzykach w takim zakresie funkcje manipulacji
na ³añcuchach znakowych, </li>
  <li>realizacja koncepcji pamiêci asocjacyjnej, </li>
  <li>naturalno¶æ typów danych (typ danych wynika z kontekstu ich u¿ycia,
nie potrzebne s± ¿adne deklaracje; zawsze jednak mo¿emy sprawdzaæ przy pomocy
odpowiednich funkcji z jakim rodzajem danych mamy akurat do czynienia), </li>
  <li>dynamiczno¶æ wszystkich - statycznych w wielu innych jêzykach - elementów
programu, od wymiarów tablic, poprzez typy danych (z indeksami tablic w³±cznie)
a¿ po instrukcje programu. </li>
</ul>

<p>Sprawia to, ¿e REXX mo¿e byæ bardzo efektywnie i elastycznie u¿ywany w zadaniach
przetwarzania informacji symbolicznej, szczególnie o s³abo ustrukturyzowanym
charakterze.<br>
<br>
Szczególn± cech± REXXa s± równie¿<b> pe³na dok³adno¶æ</b> wykonywania i <b>
dowolna precyzja prezentacji</b> <b>wyników</b> operacji arytmetycznych (s±
one wykonywane "jak na kartce papieru", a liczbê prezentowanych miejsc dziesiêtnych
mo¿emy ustaliæ dowolnie np. na kilka tysiêcy pozycji po kropce dziesiêtnej,
ograniczeniem jest tu wy³±cznie wielko¶æ pamiêci operacyjnej). <br>
<br>
Uderzaj±ca jest - przy ca³ej mocy jêzyka - jego prostota i naturalno¶æ. Zosta³
on bowiem pomy¶lany jako jêzyk g³ównie dla "normalnych" u¿ytkowników komputerów,
a nie tylko profesjonalnych programistów.<br>
<br>
<b>KRÓTKA HISTORIA REXXa</b><br>
<br>
Autorem jêzyka programowania REXX (pe³na nazwa brzmi Restructured EXtended
eXecutor) jest Mike Cowlishow. Jêzyk ten zosta³ stworzony w firmie IBM na
prze³omie lat siedemdziesi±tych i osiemdziesi±tych. W 1983 sta³ siê on czê¶ci±
systemu operacyjnego IBM VM/SP. Pó¼niej w³±czono go do systemu OS/2 jako
OS/2 Procedure Language/2. W 1987 IBM og³osi³ REXX jako jedn± ze sk³adowych
SAA (System Application Architecture), co oznacza podtrzymywanie go na wielu
platformach (np. VM, MVS, OS/400, S/390, OS/2). <br><br>

REXX powsta³ - z dzisiejszego punktu widzenia - w do¶æ odleg³ej przesz³o¶ci
informatycznej, w czasach triumfów programowania strukturalnego, ¶rodowisk
znakowych i linii komend. W tych kategoriach zachowuje dalej pierwotn± ¶wie¿o¶æ.
Jest kwesti± dyskusji jak szybko i czy ostatecznie w ogóle te elementy programowania
zostan± wyparte przez GUI i programowanie obiektowe. S± one przecie¿ wci±¿
zachowywane nie tylko ze wzglêdu na przyzwyczajenia rzesz u¿ytowników, ale
równie¿ dlatego, ¿e w wielu przypadkach s± bardziej efektywne zarówno w programowaniu,
jak i w dzia³aniu, a dla niektórych rodzajów zadañ nie maj± alternatywy.<br>
Tworzy to swoist± niszê, w której - pomocniczo traktowany - REXX "tradycyjny"
ma wa¿ne zastosowania. <br>
Ale na tym historia i zastosowania REXXa siê nie koñcz±. <br>
<br>
Dostêpne s± rozszerzenia REXXa (np. freeware'owy VREXX), pozwalaj±ce na ³atwe
strukturalne programowanie graficznych interfejsów u¿ytkownika (okienka,
dialogi, itp.). <br>
Wizualne ¶rodowiska zdarzeniowego programowania w REXXie pozwalaj± bardzo
³atwo tworzyæ programy GUI  (np. VX REXX,  VisPro/REXX, GpfREXX, DrDialog,
ObjectRexx dla Windows). <br>
Warto zreszt± podkre¶liæ, ¿e architektura implementacji jêzyka pozwala go
bardzo ³atwo rozszerzaæ o dowolne "dodatki".<br>
<br>
Na bazie klasycznego REXXa powsta³y dwa nowe jêzyki obiektowe:<br>

<ul>
  <li>ObjectREXX</li>
  <li>NetRexx</li>
</ul>

<p>Ten ostatni (autorstwa Mike Cowlishow'a) pozwala pisaæ programy Javy (tak,
Javy!) du¿o pro¶ciej i szybciej ni¿ w samej Javie (program w NetRexxie jest
kompilowany do pliku .class z zachowaniem lub nie po¶redniego kodu ¼ród³owego
Javy).
<br>
<br>
Wszystkie trzy jêzyki: klasyczny REXX, ObjectRexx i NetRexx dzia³aj± wedle
zasady "write once - rum everywhere" na wszystkich platformach systemowych,
w tym najpopularniejszych: Linux i Windows.</p>
 
</body>
</html>
